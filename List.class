;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description: This class can be used as a dynamically sized      ;
; List to store any data type                                     ;
;                                                                 ;
; Usage: $List(<ListPtr>,<Params>,...).<Member>                   ;
; Example: var %x = $List                                         ;
; Example: var %itemID = $List(%x,$long(500)).add                 ;
; Example: $List(%x,%itemID,$long(499)).set                       ;
; Example: $List(%x,%ItemID).remdel                               ;
; Example: $List(%x).delete                                       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;
; Class Header ;
;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
; Public Declarations ;
;;;;;;;;;;;;;;;;;;;;;;;
alias List.FREE.PUBLIC
alias List.ADD.PUBLIC
alias List.REMOVE.PUBLIC
alias List.UNSET.PUBLIC
alias List.GET.PUBLIC
alias List.COUNT.PUBLIC
alias List.SET.PUBLIC
alias List.INSERT.PUBLIC
;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exception Declarations ;
;;;;;;;;;;;;;;;;;;;;;;;;;;
alias List.EXCEPTION.RangeErr {
  var %params $1, %object $2, %error $3, %message $6, %scriptLine $4, %scriptDir $5
  + Exception Caught on line $+($chr(40),%scriptLine,:,%scriptDir,$chr(41)) from Object ( $+ %object $+ : $+ $IsInstance(%object) $+ ): %error $+  - %message
  return $null
}
;;;;;;;;;;;;;;;;;;;;;;
; Main List Function ;
;;;;;;;;;;;;;;;;;;;;;;
alias List {
  var %Class List
  var %prop $mprop($prop)
  if !%prop {
    if ($IsPrivate(%Class,INIT)) {
      var %astart $MAKETOKCOUNT
      MAKETOK %Class
      MAKETOK INIT
      var %aend $MAKETOKCOUNT

      var %bstart $MAKETOKCOUNT
      var %bend $MAKETOKCOUNT

      var %cstart $MAKETOKCOUNT + 1
      MAKETOK $*
      var %cend $MAKETOKCOUNT

      var %object $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
      - $inheritsFrom(%object,%Class)
      UNMAKETOK
      return %object
    }
    UNMAKETOK
  }
  else if $IsPublic(%class,$fprop(%prop)) {
    var %object $1

    var %astart $MAKETOKCOUNT
    MAKETOK %Class
    MAKETOK $prop
    MAKETOK %object
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 1
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  else {
    UNMAKETOK
    if $isinstance($1) {
      return $catch($1,MemberErr, $scriptline, $token($token($script,-1,92),1,46), $qt($fprop($mprop($prop))) is not a public member of class $qt(%class))
    }
    else {
      return $catch(%class,MemberErr, $scriptline, $token($token($script,-1,92),1,46), $qt($fprop($mprop($prop))) is not a public member of class $qt(%Class)).class  
    }
  }
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialization Function ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias -l List.INIT {
  var %params $1
  var %object $2
  
  var %instance $iif(%object,$v1,$class)
 
 echo -a INSTANCE: %instance
 
  - $class(%instance,COUNT,0).set
  - $class(%instance,TOTAL,0).set
  ;;;;;;;;;;;;;;;;;;;;;;;;
  ; Do Initializing here ;
  ;;;;;;;;;;;;;;;;;;;;;;;;
  return %instance
}
;;;;;;;;;;;;;;;;;;;;
; END CLASS HEADER ;
;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;
; List body ;
;;;;;;;;;;;;;
alias -l List.COUNT {
  var %params $1
  var %object $2

  if (!$IsInstanceOf(%object, List)) {
    UNMAKETOK
    if ($isInstance(%object)) {
      return $catch(%Object, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List))
    }
    else {
      return $catch(Class, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List)).class
    }
  }

  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    ;MAKETOK %object
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 3
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
  return $class(%object,COUNT).GET
}

alias -l List.UNSET {
  var %astart $MAKETOKCOUNT
  MAKETOK List
  MAKETOK $+(REMOVE,$iif($prop,.),$prop)
  MAKETOK %object
  MAKETOK $cprop(%params,IS_OBJECT_CALL)
  var %aend $MAKETOKCOUNT

  var %bstart $MAKETOKCOUNT
  ;MAKETOK %object
  var %bend $MAKETOKCOUNT

  var %cstart $MAKETOKCOUNT + 1
  MAKETOK $*
  var %cend $MAKETOKCOUNT

  return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
}

alias -l List.REMOVE {
  var %params $1
  var %object $2
  var %range $3

  if (!$IsInstanceOf(%object, List)) {
    UNMAKETOK
    if ($isInstance(%object)) {
      return $catch(%Object, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List))
    }
    else {
      return $catch(Class, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List)).class
    }
  }

  if %range !isnum 0- $+ $Class(%object,COUNT).GET { return $catch(%object,RangeErr,$scriptline, $token($token($script,-1,92),1,46),$qt(%range) is not a valid list index for object $qt(%object) $chr(40) $+ Valid Ranges: 0- $+ $class(%object,COUNT).GET) }
  - $Class(%object, COUNT, $calc($Class(%object,COUNT).GET - 1)).SET

  bunset &items
  - $Class(%object,ITEMS,&items).GET:BVAR

  var %x $calc(1 + ((%range - 1) * 16)),%y %x + 16,%z $bvar(&items,%x,16).text
  if %y > $bvar(&items,0) { dec %y }
  var %var $bvar(&items,%x,16).text

  bcopy -c &items %x &items %y -1
  - $Class(%object,%var).UNSET
  - $Class(%object,ITEMS,&items).SET:BVAR

  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 4
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
  return $class(%object,Count).GET
}

alias -l List.INSERT {
  var %params $1
  var %object $2
  var %range $4
  var %variable $$3

  if (!$IsInstanceOf(%object, List)) {
    UNMAKETOK
    if ($isInstance(%object)) {
      return $catch(%Object, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List))
    }
    else {
      return $catch(Class, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List)).class
    }
  }

  if %range !isnum 0- $+ $Class(%object,COUNT).GET { return $catch(%object,RangeErr,$scriptline, $token($token($script,-1,92),1,46),$qt(%range) is not a valid list index for object $qt(%object) $chr(40) $+ Valid Ranges: 0- $+ $class(%object,COUNT).GET $+ $chr(41)) }
  - $Class(%object, COUNT, $calc($Class(%object,COUNT).GET + 1)).SET
  - $Class(%object, TOTAL, $calc($Class(%object,TOTAL).GET + 1)).SET
  var %value $base($Class(%object,TOTAL).GET,10,10,16)

  bunset &items
  - $Class(%object,ITEMS,&items).GET:BVAR

  var %x $calc(1 + ((%range - 1) * 16)),%y $calc(%x + 16)
  bcopy &items %y &items %x -1
  bset -at &items %x %value
  - $Class($1,%value,%variable).SET
  - $Class($1,ITEMS,&items).SET:BVAR

  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    ;MAKETOK %object
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 5
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
  return %variable
}

alias -l List.ADD {
  var %params $1
  var %object $2
  var %value $3

  if (!$IsInstanceOf(%object, List)) {
    UNMAKETOK
    if ($isInstance(%object)) {
      return $catch(%Object, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List))
    }
    else {
      return $catch(Class, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List)).class
    }
  }

  - $Class(%object,COUNT,$calc($Class(%object,COUNT).GET + 1)).SET
  - $Class(%object,TOTAL,$calc($Class(%object,TOTAL).GET + 1)).SET
  var %x $base($Class(%object,TOTAL).GET,10,10,16)

  bunset &items

  var %bvarcount $Class(%object,ITEMS,&items).GET:BVAR
  - BVAR COUNT: %bvarCount X: %x
  - BVAR CONTENTS: $bvar(&items,1,%bvarcount).text
  bset -at &items $calc(1 + (($class(%object,COUNT).GET - 1) * 16)) %x
  - $Class(%object,ITEMS,&items).SET:BVAR
  if $cprop(%params,BVAR) || $cprop(%params,B) {
    - $Class(%object,%x,%value).SET:BVAR
  }
  else {
    - $Class(%object,%x,%value).SET
  }
  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    ;MAKETOK %object
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 4
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
  return $Class(%object,Count).GET
}

alias -l List.GET {
  var %params $1
  var %object $2
  var %range $3
  if (!$IsInstanceOf(%object, List)) {
    UNMAKETOK
    if ($isInstance(%object)) {
      return $catch(%Object, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List))
    }
    else {
      return $catch(Class, Null, $scriptline, $token($token($script,-1,92),1,46), object $qt(%object) is not an instance of class $qt(List)).class
    }
  }
  if %range !isnum $+(0,-,$Class(%object,COUNT).GET) { 
    return $catch(%object,RangeErr,$scriptline, $token($token($script,-1,92),1,46),$qt(%range) is not a valid list index for object $qt(%object) $chr(40) $+ Valid Ranges: 0- $+ $class(%object,COUNT).GET $+ $chr(41)) 

  }
  $iif(%range == 0,return $Class(%object,COUNT).GET)

  bunset &items
  - $Class(%object,ITEMS,&items).GET:BVAR

  var %number $calc(1 + ((%range - 1) * 16))

  var %var2 $bvar(&items,%number,16).text
  var %return, %start 1

  if $cprop(%params,BVAR) || $cprop(%params,B) {
    var %bvar $4
    var %return $Class(%object,%var2,%bvar).GET:BVAR
    var %start 5

  }
  else {
    var %return $Class(%object,%var2).GET
    var %start 4
  }

  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    $iif($cprop(%params,STACK),MAKETOK %return)
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + %start

    MAKETOK $*
    $iif(!$cprop(%params,STACK),MAKETOK %return)
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
  return %return
}

alias -l List.SET {
  var %params $1
  var %obect $2
  var %range $3
  var %value $4
  if %range !isnum 0- $+ $Class(%object,COUNT).GET { return $catch(%object,RangeErr,$scriptline, $token($token($script,-1,92),1,46),$qt(%range) is not a valid list index for object $qt(%object) $chr(40) $+ Valid Ranges: 0- $+ $class(%object,COUNT).GET $+ $chr(41)) }

  bunset &items
  - $Class(%object,ITEMS,&items).GET:BVAR

  var %z $bvar(&items,$calc(1 + ((%range - 1) * 16)),16).text
  var %x $Class(%object,%z).GET
  if $IsInstance(%x) { - $Object(%x).FREE } 
  - $Class(%object,%z,%value).SET

  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    ;MAKETOK %object
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 5
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }

  UNMAKETOK
}

alias -l List.IMPORT {
  var %params $1
  var %object $2
  if ($IsInstanceOf(%object,List)) {
    var %x $List(%object).COUNT
    while %x {
      - $Class($list(%object,%x).GET).IMPORT
      - Loaded object $qt($List($1,%x).get) of type $qt($IsInstance($List($1,%x).get))
    }
    dec %x
  }
  if $exists($+($mircdir,MSL++,\,%object,.items)) {

    bunset &data
    bread $+($mircdir,MSL++,\,%object,.items) 1 $file($+($mircdir,MSL++,\,%object,.items)).size &data

    - $Class(%object,ITEMS,&data).SET:BVAR
  }
  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    ;MAKETOK %object
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 3
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
}

alias -l List.EXPORT {
  var %params $1
  var %object $2
  var %x $List(%object).COUNT
  while %x {
    var %y $List(%object,%x).GET
    if $IsInstance(%y) {
      - $class(%y).EXPORT
      - Saved object $qt($List(%object,%x).get)
    }
    dec %x
  }
  bunset &data
  - $Class(%object,ITEMS,&data).GET:BVAR
  if $exists($+($mircdir,MSL++,\,%object,.items)) { 
    .remove $+($mircdir,MSL++,\,%object,.items)
  }
  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    ;MAKETOK %object
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 3
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
  bwrite $+($mircdir,MSL++,\,%object,.items) 1 -1 &data
}
alias -l List.FREE {
  ;;;;;;;;;;;;;;;;;;;;;;
  ; Do Destroying here ;
  ;;;;;;;;;;;;;;;;;;;;;;
  var %params $1
  var %object $2
  - $Class(%object,ITEMS).UNSET
  - $Class(%object,TOTAL).UNSET
  - $Class(%object,COUNT).UNSET
  if $cprop(%params,ALL) {
    while $list(%object,1) {
      var %itemNumber $v1
      var %itemName $hget(%object,%y)
      if $IsInstance(%itemname) {
        - $Object(%x,1).FREE
        - Removed object: $qt(%x) from list $qt(%object)
      }
      - $Class(%object,%y).UNSET
    }
  }
  if $prop {
    var %astart $MAKETOKCOUNT
    MAKETOK List
    MAKETOK $prop
    MAKETOK %object
    MAKETOK $cprop(%params,IS_OBJECT_CALL)
    var %aend $MAKETOKCOUNT

    var %bstart $MAKETOKCOUNT
    ;MAKETOK %object
    var %bend $MAKETOKCOUNT

    var %cstart $MAKETOKCOUNT + 3
    MAKETOK $*
    var %cend $MAKETOKCOUNT

    return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
  }
  UNMAKETOK
  return $Class(%object).FREE
}
;;;;;;;;;;;;;;;;;
; End List Body ;
;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;
; Class Footer ;
;;;;;;;;;;;;;;;;
alias -l - { !noop $1- }
alias -l + { $iif($Window(@Debug),echo @Debug,!noop) $iif($1-,$v1,$crlf) }

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description: Returns whether or not a class member ;
; is private.                                        ;
;                                                    ;
; Usage: $IsPrivate(<Class>,<Member>)                ;
; Example: if ($IsInstanceOf(%Player,Player)) ..     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias -l IsPrivate return $iif($IsClass($1) && $isalias($+($1.,$2)),$true,$false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description: Returns whether or not a class member ;
; is an exception.                                   ;
;                                                    ;
; Usage: $IsException(<Class>,<Member>)              ;
; Example: if ($IsExceptiion(%class,Null)) ..        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias -l IsException return $iif($isalias($+($1,.EXCEPTION.,$$2)),$true,$false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code for passing dynamic variables to the $meval function ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;      var %astart $MAKETOKCOUNT         ; For passing variables to the $meval function (or your own function)                      ;
;      MAKETOK ClassName                           ;                                                                                          ;
;      MAKETOK $prop                               ;                                                                                          ;
;      var %aend $MAKETOKCOUNT           ;                                                                                          ;
;                                                            ;                                                                                          ;
;      var %bstart $MAKETOKCOUNT         ; For passing variables before the $N- tokens are passed (any number of variables allowed  ;
;      MAKETOK SomeValue                           ;    these variables will be before the $N- tokens.                                        ;
;      MAKETOK SomeValue2                          ;                                                                                          ;
;      var %bend $MAKETOKCOUNT           ;                                                                                          ;
;                                                            ;                                                                                          ;
;      var %cstart $MAKETOKCOUNT + 1      ; Starting token number (if trying to pass $2- to a function you put + 2 instead of  +1    ; 
;      MAKETOK $*                                  ;    (which is for tokens $1-)                                                             ;
;      var %cend $MAKETOKCOUNT            ;                                                                                          ;
;                                                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;             
;      return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend) ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias -l meval {
  var %astart $1
  var %aend $2
  var %acount %aend - %astart

  var %bstart $3
  var %bend $4
  var %bcount %bend - %bstart

  var %cstart $5 - 1
  var %cend $$6
  var %ccount %cend - %cstart

  var %localVariables

  var %x 1
  while %x <= %acount {
    var %y %x + %astart
    var %localVariables %localVariables $+ $chr(255) $+ $ $+ getmaketok $+ [ ( ] $+ %y $+ [ ) ]
    inc %x
  }

  tokenize 255 %localVariables
echo -a Local Variable Count: $0 Local Variables: $1-
  var %class [ [ $1 ] ]
  var %prop [ [ $2 ] ]
  var %object [ [ $3 ] ]
  var %isObjectCall [ [ $4 ] ]

  var %header,%footer 

  var %x 1
  while %x <= %bcount {
    var %y %x + %bstart
    var %header %header $+ $chr(255) $+ $ $+ getmaketok $+ [ ( ] $+ %y $+ [ ) ]
    inc %x
  }

  var %x 1
  while %x <= %ccount {
    var %y %x + %cstart
    var %footer %footer $+ $chr(255) $+ $ $+ getmaketok $+ [ ( ] $+ %y $+ [ ) ]
    inc %x
  }

  var %eval,%endeval

  ;var %eval $ $+ %class $+ . $+ $fprop($mprop(%prop)) $+ [ ( ] $+ [ $fprop($mprop(%prop),2-) ] $+ [ , ]
  ;var %endeval [ ) ] $+ . $+ [ $mprop(%prop,1) ]

  ;;;;;;;;;;;;;;;;;
  if !%isObjectCall {
    if $isPublic(%class,$fprop($mprop(%prop))) || ($isPrivate(%class,$fprop($mprop(%prop))) && $fprop($mprop(%prop)) == INIT) {
      var %eval $ $+ %class $+ . $+ $fprop($mprop(%prop)) $+ [ ( ] $+ $fprop($mprop(%prop),2-) $+ [ , ]
      var %endeval [ ) ] $+ . $+ [ $mprop(%prop,1) ]
    }
    else if $IsException(%class, $fprop($mprop(%prop))) {
      var %eval $ $+ %class $+ .EXCEPTION. $+ $fprop($mprop(%prop)) $+ [ ( ] $+ $fprop($mprop(%prop),2-) $+ [ , ]
      var %endeval [ ) ] $+ . $+ $mprop(%prop,1)
    }
    else {
      if ($IsInstance(%obejct))  {
        UNMAKETOK
        return $catch(%object, NoOperation, $scriptline, $token($token($script,-1,96),1,46), $qt($fprop($mprop(%prop))) is not a public member of class $qt(%class))
      }
      else {
        UNMAKETOK
        return $catch(Class, NoOperation, $scriptline, $token($token($script,-1,96),1,46), $qt($fprop($mprop(%prop))) is not a public member of class $qt(%class)).class
      }
    }
  }
  else {
    var %eval $ $+ OBJECT $+ [ ( ]
    var %endeval [ ) ] $+ . $+ $prop
  }
  ;;;;;;;;;;;;;;;;;

  tokenize 255 %header $+ %footer
  
  var %x 1
  while %x <= $0 {
    if %x == $0 {
      var %eval %eval $+ [ $ $+ [ %x ] ]
    }
    else {
      var %eval %eval $+ [ $ $+ [ %x ] ] $+ [ , ]
    }
    inc %x
  }  
  return [ [ %eval ] $+ [ %endeval ] ]
}
;;;;;;;;;;;;;
; End meval ;
;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description: Called when ever an error is caught   ;
;                                                    ;
; Usage: $catch(<Instance>,<Error>,<Message>)        ;
; Example: if (!$IsInstanceOf(%Player,Player)) {     ;
; $catch(%Player,InstanceErr,Object %player is not   ;
;  an instance of class Player)                      ;
; }                                                  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias -l CATCH {
  var %error $2,%message $5,%instanceOrClass $1,%scriptLine $3, %scriptDir $4, %isClass $iif($mprop($prop) == class, $true,$false)

  if $isInstance(%instanceOrClass) && !%isClass {
    var %x 1
    var %inheritance $hget(MSL++,$+(%instanceOrClass,_,INIT))
    while $token(%inheritance,%x,32) {
      var %currentClass $v1
      if $IsException(%currentClass,%error) {
        var %astart $MAKETOKCOUNT
        MAKETOK %currentClass
        MAKETOK $+(%error,:,$token($token($script,-1,92),1,46),.,$prop)
        MAKETOK %instanceOrClass
        var %aend $MAKETOKCOUNT

        var %bstart $MAKETOKCOUNT
        var %bend $MAKETOKCOUNT

        var %cstart $MAKETOKCOUNT + 1
        MAKETOK $*
        var %cend $MAKETOKCOUNT
        return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
      }
      inc %x
    }
  }
  else if %isClass && $isClass(%instanceOrClass) {
    if $IsException(%instanceOrClass,%error) {
      var %astart $MAKETOKCOUNT
      MAKETOK %instanceOrClass
      MAKETOK $+(%error,:,$token($token($script,-1,92),1,46),.,$mprop($prop,1))
      var %aend $MAKETOKCOUNT

      var %bstart $MAKETOKCOUNT
      var %bend $MAKETOKCOUNT

      var %cstart $MAKETOKCOUNT + 1
      MAKETOK $*
      var %cend $MAKETOKCOUNT

      return $meval(%astart,%aend,%bstart,%bend,%cstart,%cend)
    }
  }
  UNMAKETOK
}
;;;;;;;;;;;;;
; End Catch ;
;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;
; END CLASS FOOTER ;
;;;;;;;;;;;;;;;;;;;;
